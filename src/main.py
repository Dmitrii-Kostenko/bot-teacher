# # src/main.py


import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

import bot_handlers

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
import logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TOKEN")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.warning('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: %s', context.error)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n"
        "–ù–∞–∂–º–∏ 'üîÑ –°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
    )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    keyboard = [[InlineKeyboardButton("üîÑ –°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="random")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–∏—Ä–∞–π!", reply_markup=reply_markup)

# –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
async def handle_random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        question = bot_handlers.get_question(context.bot_data["questions"])
        context.user_data["current_question"] = question

        buttons = [[InlineKeyboardButton(option, callback_data=option) for option in question["options"]]]
        reply_markup = InlineKeyboardMarkup(buttons)

        await query.edit_message_text(text=f"üß† –í–æ–ø—Ä–æ—Å: {question['question']}")
        await query.message.reply_text("–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: %s", str(e))
        await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    current_q = context.user_data.get("current_question")

    if not current_q:
        await query.edit_message_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
        return

    user_answer = query.data
    correct = current_q["correct"]
    hint = current_q.get("hint", "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    if user_answer == correct:
        await query.edit_message_text(f"‚úÖ –í–µ—Ä–Ω–æ!\n\n{current_q['question']}")
    else:
        await query.edit_message_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint}")

    # –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    next_btn = [[InlineKeyboardButton("üîÑ –°–ª–µ–¥—É—é—â–∏–π", callback_data="random")]]
    reply_markup = InlineKeyboardMarkup(next_btn)
    await query.message.reply_text("–ù–∞–∂–º–∏ –Ω–∏–∂–µ:", reply_markup=reply_markup)

# –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == '__main__':
    print("üöÄ –ë–æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª...")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = ApplicationBuilder().token(TOKEN).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(handle_random, pattern="^random$"))
        application.add_handler(CallbackQueryHandler(handle_answer))

        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        application.bot_data["questions"] = bot_handlers.load_questions()
        print("üìö –í–æ–ø—Ä–æ—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:", str(e))
        exit()

    print("üì° –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()